---
name: Deploy Images

on:
  push:
    tags:
      - "*"

jobs:
  detect_changes:
    name: Detect Changed Services
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Get current and previous tags
        id: tags
        run: |
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          PREV_TAG="$(git tag --sort=-creatordate | grep -B1 "^$CURRENT_TAG$$" | head -n1)"
          echo "CURRENT_TAG=$CURRENT_TAG" >> "${GITHUB_ENV}"
          echo "PREV_TAG=$PREV_TAG" >> "${GITHUB_ENV}"
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREV_TAG"

      - name: Determine Changed Services
        id: get_matrix
        shell: bash
        run: |
          echo "Detecting changes..."
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag, building all images."
            CHANGED="$(ls images/)"
          else
            CHANGED="$(git diff --name-only "${PREV_TAG}" "${CURRENT_TAG}" | grep '^images/' | cut -d/ -f2 | sort -u)"
          fi
          echo "Changed images: $CHANGED"
          matrix="{\"include\": ["
          first=1
          for image in $CHANGED; do
           if [ -f "images/${image}/Dockerfile" ]; then
             if [ $first -eq 0 ]; then
               matrix+=","
             fi
             matrix+="{\"service\": \"${image}\"}"
             first=0
           fi
          done
          matrix+="]}"
          echo "Matrix for build job: $matrix"
          echo "matrix=$matrix" >> "${GITHUB_OUTPUT}"

      - name: Validate Matrix
        if: ${{ fromJson(steps.get_matrix.outputs.matrix).include[0] == null }}
        run: |
          echo "Output from previous step:"
          echo "${{ fromJson(steps.get_matrix.outputs.matrix).include.length }}"
          echo "${{ steps.get_matrix.outputs.matrix }}"
          echo "No services with a Dockerfile were changed. Exiting gracefully."
          exit 0
    outputs:
      matrix: ${{ steps.get_matrix.outputs.matrix }}

  build-and-push-images:
    runs-on: ubuntu-latest
    needs: detect_changes
    if: ${{ fromJson(needs.detect_changes.outputs.matrix).include[0] != null }}
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write
    concurrency:
      group: docker
    strategy:
      matrix: ${{ fromJson(needs.detect_changes.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Cache Docker layers'
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=git-
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./images/${{ matrix.service }}
          file: ./images/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      # Move new cache into place for next run
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
